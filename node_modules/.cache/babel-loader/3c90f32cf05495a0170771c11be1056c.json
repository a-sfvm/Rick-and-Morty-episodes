{"ast":null,"code":"import { tryCatch } from '../../lib/prelude.js';\nimport { isOperationDefinitionNode } from '../lib/graphql.js';\n/**\n * Refactored imports from `graphql` to be more specific, this helps import only the required files (100KiB)\n * instead of the entire package (greater than 500KiB) where tree-shaking is not supported.\n * @see https://github.com/jasonkuhrt/graphql-request/pull/543\n */\n\nimport { OperationTypeNode } from 'graphql';\nimport { parse } from 'graphql';\nimport { print } from 'graphql';\n/**\n * helpers\n */\n\nconst extractOperationName = document => {\n  let operationName = undefined;\n  const defs = document.definitions.filter(isOperationDefinitionNode);\n\n  if (defs.length === 1) {\n    operationName = defs[0].name?.value;\n  }\n\n  return operationName;\n};\n\nconst extractIsMutation = document => {\n  let isMutation = false;\n  const defs = document.definitions.filter(isOperationDefinitionNode);\n\n  if (defs.length === 1) {\n    isMutation = defs[0].operation === OperationTypeNode.MUTATION;\n  }\n\n  return isMutation;\n};\n\nexport const analyzeDocument = (document, excludeOperationName) => {\n  const expression = typeof document === `string` ? document : print(document);\n  let isMutation = false;\n  let operationName = undefined;\n\n  if (excludeOperationName) {\n    return {\n      expression,\n      isMutation,\n      operationName\n    };\n  }\n\n  const docNode = tryCatch(() => typeof document === `string` ? parse(document) : document);\n\n  if (docNode instanceof Error) {\n    return {\n      expression,\n      isMutation,\n      operationName\n    };\n  }\n\n  operationName = extractOperationName(docNode);\n  isMutation = extractIsMutation(docNode);\n  return {\n    expression,\n    operationName,\n    isMutation\n  };\n};","map":{"version":3,"mappings":"AAAA,SAASA,QAAT,QAAyB,sBAAzB;AACA,SAASC,yBAAT,QAA0C,mBAA1C;AAEA;;;;;;AAKA,SAA4BC,iBAA5B,QAAqD,SAArD;AACA,SAASC,KAAT,QAAsB,SAAtB;AACA,SAASC,KAAT,QAAsB,SAAtB;AAEA;;;;AAIA,MAAMC,oBAAoB,GAAIC,QAAD,IAA+C;EAC1E,IAAIC,aAAa,GAAGC,SAApB;EAEA,MAAMC,IAAI,GAAGH,QAAQ,CAACI,WAAT,CAAqBC,MAArB,CAA4BV,yBAA5B,CAAb;;EAEA,IAAIQ,IAAI,CAACG,MAAL,KAAgB,CAApB,EAAuB;IACrBL,aAAa,GAAGE,IAAI,CAAC,CAAD,CAAJ,CAASI,IAAT,EAAeC,KAA/B;EACD;;EAED,OAAOP,aAAP;AACD,CAVD;;AAYA,MAAMQ,iBAAiB,GAAIT,QAAD,IAAoC;EAC5D,IAAIU,UAAU,GAAG,KAAjB;EAEA,MAAMP,IAAI,GAAGH,QAAQ,CAACI,WAAT,CAAqBC,MAArB,CAA4BV,yBAA5B,CAAb;;EAEA,IAAIQ,IAAI,CAACG,MAAL,KAAgB,CAApB,EAAuB;IACrBI,UAAU,GAAGP,IAAI,CAAC,CAAD,CAAJ,CAASQ,SAAT,KAAuBf,iBAAiB,CAACgB,QAAtD;EACD;;EAED,OAAOF,UAAP;AACD,CAVD;;AAYA,OAAO,MAAMG,eAAe,GAAG,CAC7Bb,QAD6B,EAE7Bc,oBAF6B,KAGqD;EAClF,MAAMC,UAAU,GAAG,OAAOf,QAAP,KAAoB,QAApB,GAA+BA,QAA/B,GAA0CF,KAAK,CAACE,QAAD,CAAlE;EAEA,IAAIU,UAAU,GAAG,KAAjB;EACA,IAAIT,aAAa,GAAGC,SAApB;;EAEA,IAAIY,oBAAJ,EAA0B;IACxB,OAAO;MAAEC,UAAF;MAAcL,UAAd;MAA0BT;IAA1B,CAAP;EACD;;EAED,MAAMe,OAAO,GAAGtB,QAAQ,CAAC,MAAO,OAAOM,QAAP,KAAoB,QAApB,GAA+BH,KAAK,CAACG,QAAD,CAApC,GAAiDA,QAAzD,CAAxB;;EACA,IAAIgB,OAAO,YAAYC,KAAvB,EAA8B;IAC5B,OAAO;MAAEF,UAAF;MAAcL,UAAd;MAA0BT;IAA1B,CAAP;EACD;;EAEDA,aAAa,GAAGF,oBAAoB,CAACiB,OAAD,CAApC;EACAN,UAAU,GAAGD,iBAAiB,CAACO,OAAD,CAA9B;EAEA,OAAO;IAAED,UAAF;IAAcd,aAAd;IAA6BS;EAA7B,CAAP;AACD,CAtBM","names":["tryCatch","isOperationDefinitionNode","OperationTypeNode","parse","print","extractOperationName","document","operationName","undefined","defs","definitions","filter","length","name","value","extractIsMutation","isMutation","operation","MUTATION","analyzeDocument","excludeOperationName","expression","docNode","Error"],"sources":["/Users/admin/code/language-finder/node_modules/graphql-request/src/legacy/helpers/analyzeDocument.ts"],"sourcesContent":["import { tryCatch } from '../../lib/prelude.js'\nimport { isOperationDefinitionNode } from '../lib/graphql.js'\nimport type { RequestDocument } from './types.js'\n/**\n * Refactored imports from `graphql` to be more specific, this helps import only the required files (100KiB)\n * instead of the entire package (greater than 500KiB) where tree-shaking is not supported.\n * @see https://github.com/jasonkuhrt/graphql-request/pull/543\n */\nimport { type DocumentNode, OperationTypeNode } from 'graphql'\nimport { parse } from 'graphql'\nimport { print } from 'graphql'\n\n/**\n * helpers\n */\n\nconst extractOperationName = (document: DocumentNode): string | undefined => {\n  let operationName = undefined\n\n  const defs = document.definitions.filter(isOperationDefinitionNode)\n\n  if (defs.length === 1) {\n    operationName = defs[0]!.name?.value\n  }\n\n  return operationName\n}\n\nconst extractIsMutation = (document: DocumentNode): boolean => {\n  let isMutation = false\n\n  const defs = document.definitions.filter(isOperationDefinitionNode)\n\n  if (defs.length === 1) {\n    isMutation = defs[0]!.operation === OperationTypeNode.MUTATION\n  }\n\n  return isMutation\n}\n\nexport const analyzeDocument = (\n  document: RequestDocument,\n  excludeOperationName?: boolean,\n): { expression: string; operationName: string | undefined; isMutation: boolean } => {\n  const expression = typeof document === `string` ? document : print(document)\n\n  let isMutation = false\n  let operationName = undefined\n\n  if (excludeOperationName) {\n    return { expression, isMutation, operationName }\n  }\n\n  const docNode = tryCatch(() => (typeof document === `string` ? parse(document) : document))\n  if (docNode instanceof Error) {\n    return { expression, isMutation, operationName }\n  }\n\n  operationName = extractOperationName(docNode)\n  isMutation = extractIsMutation(docNode)\n\n  return { expression, operationName, isMutation }\n}\n"]},"metadata":{},"sourceType":"module"}