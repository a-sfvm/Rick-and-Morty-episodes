{"ast":null,"code":"import { GraphQLClient } from 'graphql-request';\nexport const countriesClient = new GraphQLClient('https://countries.trevorblades.com/graphql');\nexport const LANGUAGE_SEARCH_QUERY = `\n  query SearchCountriesByLanguage($code: String!) {\n    countries(filter: { OR: [\n      { languages: { code: { regex: $code, options: \"i\" } } },\n      { languages: { name: { regex: $code, options: \"i\" } } }\n    ]}) {\n      code\n      name\n      native\n      capital\n      continent {\n        name\n      }\n      languages {\n        code\n        name\n        native\n      }\n      emoji\n    }\n  }\n`;\nexport async function searchCountriesByLanguage(searchTerm) {\n  try {\n    const isLanguageCode = /^[a-zA-Z]{2,3}$/.test(searchTerm);\n    const searchRegex = isLanguageCode ? `^${searchTerm}$` : searchTerm;\n    const variables = {\n      code: searchRegex\n    };\n    const data = await countriesClient.request(LANGUAGE_SEARCH_QUERY, variables);\n    return data.countries;\n  } catch (error) {\n    console.error('Countries Search Error:', error);\n    throw error;\n  }\n}","map":{"version":3,"names":["GraphQLClient","countriesClient","LANGUAGE_SEARCH_QUERY","searchCountriesByLanguage","searchTerm","isLanguageCode","test","searchRegex","variables","code","data","request","countries","error","console"],"sources":["/Users/admin/code/language-finder/src/services/countriesGraphQL.ts"],"sourcesContent":["import { GraphQLClient } from 'graphql-request';\n\nimport Country from '../models/country';\n\nexport const countriesClient = new GraphQLClient('https://countries.trevorblades.com/graphql');\n\nexport const LANGUAGE_SEARCH_QUERY = `\n  query SearchCountriesByLanguage($code: String!) {\n    countries(filter: { OR: [\n      { languages: { code: { regex: $code, options: \"i\" } } },\n      { languages: { name: { regex: $code, options: \"i\" } } }\n    ]}) {\n      code\n      name\n      native\n      capital\n      continent {\n        name\n      }\n      languages {\n        code\n        name\n        native\n      }\n      emoji\n    }\n  }\n`;\n\ninterface CountriesResponse {\n  countries: Array<Country>;\n}\n\nexport async function searchCountriesByLanguage(searchTerm: string): Promise<Country[]> {\n  try {\n    const isLanguageCode = /^[a-zA-Z]{2,3}$/.test(searchTerm);\n\n    const searchRegex = isLanguageCode\n      ? `^${searchTerm}$`\n      : searchTerm;\n\n    const variables = { code: searchRegex };\n    const data = await countriesClient.request<CountriesResponse>(LANGUAGE_SEARCH_QUERY, variables);\n    return data.countries;\n  } catch (error) {\n    console.error('Countries Search Error:', error);\n    throw error;\n  }\n}\n"],"mappings":"AAAA,SAASA,aAAT,QAA8B,iBAA9B;AAIA,OAAO,MAAMC,eAAe,GAAG,IAAID,aAAJ,CAAkB,4CAAlB,CAAxB;AAEP,OAAO,MAAME,qBAAqB,GAAI;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CArBO;AA2BP,OAAO,eAAeC,yBAAf,CAAyCC,UAAzC,EAAiF;EACtF,IAAI;IACF,MAAMC,cAAc,GAAG,kBAAkBC,IAAlB,CAAuBF,UAAvB,CAAvB;IAEA,MAAMG,WAAW,GAAGF,cAAc,GAC7B,IAAGD,UAAW,GADe,GAE9BA,UAFJ;IAIA,MAAMI,SAAS,GAAG;MAAEC,IAAI,EAAEF;IAAR,CAAlB;IACA,MAAMG,IAAI,GAAG,MAAMT,eAAe,CAACU,OAAhB,CAA2CT,qBAA3C,EAAkEM,SAAlE,CAAnB;IACA,OAAOE,IAAI,CAACE,SAAZ;EACD,CAVD,CAUE,OAAOC,KAAP,EAAc;IACdC,OAAO,CAACD,KAAR,CAAc,yBAAd,EAAyCA,KAAzC;IACA,MAAMA,KAAN;EACD;AACF"},"metadata":{},"sourceType":"module"}