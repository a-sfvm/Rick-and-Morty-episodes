{"ast":null,"code":"import { GraphQLClient } from '../classes/GraphQLClient.js';\n/**\n * Send a GraphQL Query to the GraphQL server for execution.\n */\n\nexport const rawRequest = async function () {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  const [urlOrOptions, query, ...variablesAndRequestHeaders] = args;\n  const requestOptions = parseRawRequestExtendedArgs(urlOrOptions, query, ...variablesAndRequestHeaders);\n  const client = new GraphQLClient(requestOptions.url);\n  return client.rawRequest({ ...requestOptions\n  });\n};\nexport const parseRawRequestExtendedArgs = function (urlOrOptions, query) {\n  for (var _len2 = arguments.length, variablesAndRequestHeaders = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n    variablesAndRequestHeaders[_key2 - 2] = arguments[_key2];\n  }\n\n  const [variables, requestHeaders] = variablesAndRequestHeaders;\n  return typeof urlOrOptions === `string` ? {\n    url: urlOrOptions,\n    query: query,\n    variables,\n    requestHeaders,\n    signal: undefined\n  } : urlOrOptions;\n};\nexport const parseRawRequestArgs = (queryOrOptions, variables, requestHeaders) => {\n  return queryOrOptions.query ? queryOrOptions : {\n    query: queryOrOptions,\n    variables: variables,\n    requestHeaders: requestHeaders,\n    signal: undefined\n  };\n};","map":{"version":3,"mappings":"AAAA,SAASA,aAAT,QAA8B,6BAA9B;AAQA;;;;AAGA,OAAO,MAAMC,UAAU,GAAe,kBAEC;EAAA,kCADlCC,IACkC;IADlCA,IACkC;EAAA;;EACrC,MAAM,CAACC,YAAD,EAAeC,KAAf,EAAsB,GAAGC,0BAAzB,IAAuDH,IAA7D;EACA,MAAMI,cAAc,GAAGC,2BAA2B,CAAIJ,YAAJ,EAAkBC,KAAlB,EAAyB,GAAGC,0BAA5B,CAAlD;EACA,MAAMG,MAAM,GAAG,IAAIR,aAAJ,CAAkBM,cAAc,CAACG,GAAjC,CAAf;EACA,OAAOD,MAAM,CAACP,UAAP,CAAwB,EAC7B,GAAGK;EAD0B,CAAxB,CAAP;AAGD,CATM;AAsBP,OAAO,MAAMC,2BAA2B,GAAG,UACzCJ,YADyC,EAEzCC,KAFyC,EAIT;EAAA,mCAD7BC,0BAC6B;IAD7BA,0BAC6B;EAAA;;EAChC,MAAM,CAACK,SAAD,EAAYC,cAAZ,IAA8BN,0BAApC;EACA,OAAO,OAAOF,YAAP,KAAwB,QAAxB,GACF;IACDM,GAAG,EAAEN,YADJ;IAEDC,KAAK,EAAEA,KAFN;IAGDM,SAHC;IAIDC,cAJC;IAKDC,MAAM,EAAEC;EALP,CADE,GAQHV,YARJ;AASD,CAfM;AAqBP,OAAO,MAAMW,mBAAmB,GAAG,CACjCC,cADiC,EAEjCL,SAFiC,EAGjCC,cAHiC,KAIT;EACxB,OAAQI,cAAuC,CAACX,KAAxC,GACHW,cADG,GAEH;IACDX,KAAK,EAAEW,cADN;IAEDL,SAAS,EAAEA,SAFV;IAGDC,cAAc,EAAEA,cAHf;IAIDC,MAAM,EAAEC;EAJP,CAFL;AAQD,CAbM","names":["GraphQLClient","rawRequest","args","urlOrOptions","query","variablesAndRequestHeaders","requestOptions","parseRawRequestExtendedArgs","client","url","variables","requestHeaders","signal","undefined","parseRawRequestArgs","queryOrOptions"],"sources":["/Users/admin/code/language-finder/node_modules/graphql-request/src/legacy/functions/rawRequest.ts"],"sourcesContent":["import { GraphQLClient } from '../classes/GraphQLClient.js'\nimport type {\n  GraphQLClientResponse,\n  RawRequestOptions,\n  Variables,\n  VariablesAndRequestHeadersArgs,\n} from '../helpers/types.js'\n\n/**\n * Send a GraphQL Query to the GraphQL server for execution.\n */\nexport const rawRequest: RawRequest = async <T, V extends Variables>(\n  ...args: RawRequestArgs<V>\n): Promise<GraphQLClientResponse<T>> => {\n  const [urlOrOptions, query, ...variablesAndRequestHeaders] = args\n  const requestOptions = parseRawRequestExtendedArgs<V>(urlOrOptions, query, ...variablesAndRequestHeaders)\n  const client = new GraphQLClient(requestOptions.url)\n  return client.rawRequest<T, V>({\n    ...requestOptions,\n  })\n}\n\n// dprint-ignore\ninterface RawRequest {\n  <T, V extends Variables = Variables>(url: string, query: string, ...variablesAndRequestHeaders: VariablesAndRequestHeadersArgs<V>): Promise<GraphQLClientResponse<T>>\n  <T, V extends Variables = Variables>(options: RawRequestExtendedOptions<V>): Promise<GraphQLClientResponse<T>>\n}\n\n// dprint-ignore\ntype RawRequestArgs<V extends Variables> = \n  | [options: RawRequestExtendedOptions<V>, query?: string, ...variablesAndRequestHeaders: VariablesAndRequestHeadersArgs<V>]\n  | [url: string,                           query?: string, ...variablesAndRequestHeaders: VariablesAndRequestHeadersArgs<V>]\n\nexport const parseRawRequestExtendedArgs = <V extends Variables = Variables>(\n  urlOrOptions: string | RawRequestExtendedOptions<V>,\n  query?: string,\n  ...variablesAndRequestHeaders: VariablesAndRequestHeadersArgs<V>\n): RawRequestExtendedOptions<V> => {\n  const [variables, requestHeaders] = variablesAndRequestHeaders\n  return typeof urlOrOptions === `string`\n    ? ({\n      url: urlOrOptions,\n      query: query as string,\n      variables,\n      requestHeaders,\n      signal: undefined,\n    } as unknown as RawRequestExtendedOptions<V>)\n    : urlOrOptions\n}\n\nexport type RawRequestExtendedOptions<V extends Variables = Variables> = {\n  url: string\n} & RawRequestOptions<V>\n\nexport const parseRawRequestArgs = <V extends Variables = Variables>(\n  queryOrOptions: string | RawRequestOptions<V>,\n  variables?: V,\n  requestHeaders?: HeadersInit,\n): RawRequestOptions<V> => {\n  return (queryOrOptions as RawRequestOptions<V>).query\n    ? (queryOrOptions as RawRequestOptions<V>)\n    : ({\n      query: queryOrOptions as string,\n      variables: variables,\n      requestHeaders: requestHeaders,\n      signal: undefined,\n    } as unknown as RawRequestOptions<V>)\n}\n"]},"metadata":{},"sourceType":"module"}