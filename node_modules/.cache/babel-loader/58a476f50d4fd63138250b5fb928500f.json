{"ast":null,"code":"import { GraphQLClient } from 'graphql-request';\nexport const countriesClient = new GraphQLClient('https://countries.trevorblades.com/');\nexport const LANGUAGE_SEARCH_QUERY = `\n  query SearchCountriesByLanguage($languageCode: String!) {\n    countries(filter: { languages: { code: { eq: $languageCode } } }) {\n      code\n      name\n      native\n      capital\n      continent {\n        name\n      }\n      languages {\n        code\n        name\n        native\n      }\n      emoji\n    }\n  }\n`;\nexport async function searchCountriesByLanguage(languageCode) {\n  try {\n    const variables = {\n      languageCode\n    };\n    const data = await countriesClient.request(LANGUAGE_SEARCH_QUERY, variables);\n    return data.countries;\n  } catch (error) {\n    console.error('Countries Search Error:', error);\n    throw error;\n  }\n}","map":{"version":3,"names":["GraphQLClient","countriesClient","LANGUAGE_SEARCH_QUERY","searchCountriesByLanguage","languageCode","variables","data","request","countries","error","console"],"sources":["/Users/admin/code/language-finder/src/services/countriesGraphQL.ts"],"sourcesContent":["import { GraphQLClient } from 'graphql-request';\n\nimport Country from '../models/country';\n\nexport const countriesClient = new GraphQLClient('https://countries.trevorblades.com/');\n\nexport const LANGUAGE_SEARCH_QUERY = `\n  query SearchCountriesByLanguage($languageCode: String!) {\n    countries(filter: { languages: { code: { eq: $languageCode } } }) {\n      code\n      name\n      native\n      capital\n      continent {\n        name\n      }\n      languages {\n        code\n        name\n        native\n      }\n      emoji\n    }\n  }\n`;\n\ninterface CountriesResponse {\n  countries: Array<Country>;\n}\n\nexport async function searchCountriesByLanguage(languageCode: string): Promise<Country[]> {\n  try {\n    const variables = { languageCode };\n    const data = await countriesClient.request<CountriesResponse>(LANGUAGE_SEARCH_QUERY, variables);\n    return data.countries;\n  } catch (error) {\n    console.error('Countries Search Error:', error);\n    throw error;\n  }\n}\n"],"mappings":"AAAA,SAASA,aAAT,QAA8B,iBAA9B;AAIA,OAAO,MAAMC,eAAe,GAAG,IAAID,aAAJ,CAAkB,qCAAlB,CAAxB;AAEP,OAAO,MAAME,qBAAqB,GAAI;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAlBO;AAwBP,OAAO,eAAeC,yBAAf,CAAyCC,YAAzC,EAAmF;EACxF,IAAI;IACF,MAAMC,SAAS,GAAG;MAAED;IAAF,CAAlB;IACA,MAAME,IAAI,GAAG,MAAML,eAAe,CAACM,OAAhB,CAA2CL,qBAA3C,EAAkEG,SAAlE,CAAnB;IACA,OAAOC,IAAI,CAACE,SAAZ;EACD,CAJD,CAIE,OAAOC,KAAP,EAAc;IACdC,OAAO,CAACD,KAAR,CAAc,yBAAd,EAAyCA,KAAzC;IACA,MAAMA,KAAN;EACD;AACF"},"metadata":{},"sourceType":"module"}